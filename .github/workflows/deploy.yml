name: Semanticly increase version, create image and deploy to ECS

# Controls when the workflow will run
on:
  push:
    branches: [ main, next ]

env:
  AWS_REGION: eu-west-1                                       # set this to your preferred AWS region, e.g. us-west-1
  ECR_REGISTRY: 591006976971.dkr.ecr.eu-west-1.amazonaws.com
  ECR_REPOSITORY: cdcd-with-node                              # set this to your Amazon ECR repository name
  ECS_SERVICE: cicd-with-node-service-with-alb                # set this to your Amazon ECS service name
  ECS_CLUSTER: cicd-with-node-cluster                         # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json               # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: cicd-with-node-container                    # set this to the name of the container in the

defaults:
  run:
    shell: bash

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  bump-version:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
          fetch-depth: 0                # fetch the whole repo history

      # Runs a single command using the runners shell
      - name: Set Git Version
        # You may pin to the exact commit or the version.
        # uses: codacy/git-version@fa06788276d7492a2af01662649696d249ecf4cb
        uses: codacy/git-version@2.4.0
        id: set-git-version
        with:
          # The name of the release branch
          release-branch: main
          # The name of the dev branch
          dev-branch: next
          # The prefix to use in the version
          prefix: v

    outputs:
      version: ${{ steps.set-git-version.outputs.version }}

  create-tag:
    runs-on: ubuntu-latest
    needs: bump-version
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
          fetch-depth: 0                # fetch the whole repo history

      - name: Create tag
        # uses: https://github.com/marketplace/actions/github-script
        uses: actions/github-script@v4
        env:
          VERSION: "${{ needs.bump-version.outputs.version }}"
        with:
          github-token: ${{ github.token }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${process.env.VERSION}`,
              sha: context.sha
            })

  docker:
    runs-on: ubuntu-latest
    needs: bump-version
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ needs.bump-version.outputs.version }}
            ghcr.io/${{ github.repository }}:commit-${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ needs.bump-version.outputs.version }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY  }}:commit-${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}:latest
          cache-to: type=inline

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY  }}:commit-${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false